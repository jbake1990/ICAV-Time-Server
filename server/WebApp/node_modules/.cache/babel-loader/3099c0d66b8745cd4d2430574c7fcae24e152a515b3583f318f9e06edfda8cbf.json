{"ast":null,"code":"import _objectSpread from\"/Users/jasonbaker/Documents/ICAV Time Tracker/WebApp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// Use relative URLs in production (Vercel) and allow override in development\nconst API_BASE_URL=process.env.REACT_APP_API_URL||(process.env.NODE_ENV==='production'?'':'http://localhost:3000');// Authentication helper functions\nconst getAuthToken=()=>{return localStorage.getItem('authToken');};export const setAuthToken=token=>{localStorage.setItem('authToken',token);};export const removeAuthToken=()=>{localStorage.removeItem('authToken');};const getAuthHeaders=()=>{const token=getAuthToken();return token?{'Authorization':\"Bearer \".concat(token)}:{};};export const api={// Authentication\nasync login(username,password){const url=\"\".concat(API_BASE_URL,\"/api/auth\");console.log('Making login request to:',url);console.log('Login credentials:',{username,hasPassword:!!password});const response=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({action:'login',username,password})});console.log('Login response status:',response.status);console.log('Login response headers:',response.headers);if(!response.ok){const errorData=await response.json().catch(()=>({error:'Login failed'}));console.error('Login failed with error:',errorData);throw new Error(errorData.error||'Login failed');}const responseData=await response.json();console.log('Login successful, response data:',responseData);return responseData;},async logout(){const token=getAuthToken();if(token){const url=\"\".concat(API_BASE_URL,\"/api/auth\");await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({action:'logout',sessionToken:token})});}removeAuthToken();},async verifySession(){const token=getAuthToken();if(!token){throw new Error('No session token');}const url=\"\".concat(API_BASE_URL,\"/api/auth\");const response=await fetch(url,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({action:'verify',sessionToken:token})});if(!response.ok){throw new Error('Session verification failed');}return response.json();},// Time Entries\nasync getTimeEntries(){const url=\"\".concat(API_BASE_URL,\"/api/time-entries\");console.log('Fetching time entries from:',url);// Debug log\nconst response=await fetch(url,{headers:_objectSpread({},getAuthHeaders())});if(!response.ok){console.error('API response not ok:',response.status,response.statusText);throw new Error(\"Failed to fetch time entries: \".concat(response.status,\" \").concat(response.statusText));}return response.json();},async createTimeEntry(data){const url=\"\".concat(API_BASE_URL,\"/api/time-entries\");const response=await fetch(url,{method:'POST',headers:_objectSpread({'Content-Type':'application/json'},getAuthHeaders()),body:JSON.stringify(data)});if(!response.ok){throw new Error(\"Failed to create time entry: \".concat(response.status,\" \").concat(response.statusText));}return response.json();},// Users\nasync getUsers(){const url=\"\".concat(API_BASE_URL,\"/api/users\");const response=await fetch(url,{headers:_objectSpread({},getAuthHeaders())});if(!response.ok){throw new Error(\"Failed to fetch users: \".concat(response.status,\" \").concat(response.statusText));}return response.json();},async createUser(data){const url=\"\".concat(API_BASE_URL,\"/api/users\");const response=await fetch(url,{method:'POST',headers:_objectSpread({'Content-Type':'application/json'},getAuthHeaders()),body:JSON.stringify(data)});if(!response.ok){throw new Error(\"Failed to create user: \".concat(response.status,\" \").concat(response.statusText));}return response.json();},async deleteUser(userId){const url=\"\".concat(API_BASE_URL,\"/api/users?userId=\").concat(encodeURIComponent(userId));const response=await fetch(url,{method:'DELETE',headers:_objectSpread({},getAuthHeaders())});if(!response.ok){const errorData=await response.json().catch(()=>({error:'Unknown error'}));throw new Error(errorData.error||\"Failed to delete user: \".concat(response.status,\" \").concat(response.statusText));}return response.json();},// Admin functions\nasync clearDatabase(){const url=\"\".concat(API_BASE_URL,\"/api/admin?action=reset-db\");const response=await fetch(url,{method:'POST',headers:_objectSpread({},getAuthHeaders())});if(!response.ok){const errorData=await response.json().catch(()=>({error:'Unknown error'}));throw new Error(errorData.error||\"Failed to clear database: \".concat(response.status,\" \").concat(response.statusText));}return response.json();}};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","NODE_ENV","getAuthToken","localStorage","getItem","setAuthToken","token","setItem","removeAuthToken","removeItem","getAuthHeaders","concat","api","login","username","password","url","console","log","hasPassword","response","fetch","method","headers","body","JSON","stringify","action","status","ok","errorData","json","catch","error","Error","responseData","logout","sessionToken","verifySession","getTimeEntries","_objectSpread","statusText","createTimeEntry","data","getUsers","createUser","deleteUser","userId","encodeURIComponent","clearDatabase"],"sources":["/Users/jasonbaker/Documents/ICAV Time Tracker/WebApp/src/services/api.ts"],"sourcesContent":["// Use relative URLs in production (Vercel) and allow override in development\nconst API_BASE_URL = process.env.REACT_APP_API_URL || (process.env.NODE_ENV === 'production' ? '' : 'http://localhost:3000');\n\n// Authentication helper functions\nconst getAuthToken = (): string | null => {\n  return localStorage.getItem('authToken');\n};\n\nexport const setAuthToken = (token: string): void => {\n  localStorage.setItem('authToken', token);\n};\n\nexport const removeAuthToken = (): void => {\n  localStorage.removeItem('authToken');\n};\n\nconst getAuthHeaders = (): Record<string, string> => {\n  const token = getAuthToken();\n  return token ? { 'Authorization': `Bearer ${token}` } : {};\n};\n\nexport interface ApiTimeEntry {\n  id: string;\n  userId: string;\n  technicianName: string;\n  customerName: string;\n  clockInTime: string;\n  clockOutTime?: string;\n  lunchStartTime?: string;\n  lunchEndTime?: string;\n  driveStartTime?: string;\n  driveEndTime?: string;\n  isActive: boolean;\n  isOnLunch: boolean;\n  isDriving: boolean;\n  duration?: number;\n  formattedDuration?: string;\n  lunchDuration?: number;\n  formattedLunchDuration?: string;\n  driveDuration?: number;\n  formattedDriveDuration?: string;\n}\n\nexport interface ApiUser {\n  id: string;\n  username: string;\n  displayName: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport const api = {\n  // Authentication\n  async login(username: string, password: string): Promise<{ user: any; token: string; expiresAt: string }> {\n    const url = `${API_BASE_URL}/api/auth`;\n    console.log('Making login request to:', url);\n    console.log('Login credentials:', { username, hasPassword: !!password });\n    \n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ action: 'login', username, password }),\n    });\n    \n    console.log('Login response status:', response.status);\n    console.log('Login response headers:', response.headers);\n    \n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ error: 'Login failed' }));\n      console.error('Login failed with error:', errorData);\n      throw new Error(errorData.error || 'Login failed');\n    }\n    \n    const responseData = await response.json();\n    console.log('Login successful, response data:', responseData);\n    return responseData;\n  },\n\n  async logout(): Promise<void> {\n    const token = getAuthToken();\n    if (token) {\n      const url = `${API_BASE_URL}/api/auth`;\n      await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ action: 'logout', sessionToken: token }),\n      });\n    }\n    removeAuthToken();\n  },\n\n  async verifySession(): Promise<{ user: any; token: string; expiresAt: string }> {\n    const token = getAuthToken();\n    if (!token) {\n      throw new Error('No session token');\n    }\n    \n    const url = `${API_BASE_URL}/api/auth`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ action: 'verify', sessionToken: token }),\n    });\n    \n    if (!response.ok) {\n      throw new Error('Session verification failed');\n    }\n    return response.json();\n  },\n\n  // Time Entries\n  async getTimeEntries(): Promise<ApiTimeEntry[]> {\n    const url = `${API_BASE_URL}/api/time-entries`;\n    console.log('Fetching time entries from:', url); // Debug log\n    \n    const response = await fetch(url, {\n      headers: {\n        ...getAuthHeaders(),\n      },\n    });\n    if (!response.ok) {\n      console.error('API response not ok:', response.status, response.statusText);\n      throw new Error(`Failed to fetch time entries: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  async createTimeEntry(data: {\n    userId: string;\n    technicianName: string;\n    customerName: string;\n    clockInTime: string;\n    clockOutTime?: string;\n    lunchStartTime?: string;\n    lunchEndTime?: string;\n    driveStartTime?: string;\n    driveEndTime?: string;\n  }): Promise<ApiTimeEntry> {\n    const url = `${API_BASE_URL}/api/time-entries`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeaders(),\n      },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to create time entry: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  // Users\n  async getUsers(): Promise<ApiUser[]> {\n    const url = `${API_BASE_URL}/api/users`;\n    const response = await fetch(url, {\n      headers: {\n        ...getAuthHeaders(),\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch users: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  async createUser(data: { username: string; displayName: string; password?: string; role?: string }): Promise<ApiUser> {\n    const url = `${API_BASE_URL}/api/users`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        ...getAuthHeaders(),\n      },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to create user: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  async deleteUser(userId: string): Promise<{ message: string; deletedUser: { id: string; username: string; displayName: string } }> {\n    const url = `${API_BASE_URL}/api/users?userId=${encodeURIComponent(userId)}`;\n    const response = await fetch(url, {\n      method: 'DELETE',\n      headers: {\n        ...getAuthHeaders(),\n      },\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n      throw new Error(errorData.error || `Failed to delete user: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  },\n\n  // Admin functions\n  async clearDatabase(): Promise<{ success: boolean; message: string; deletedCount: number }> {\n    const url = `${API_BASE_URL}/api/admin?action=reset-db`;\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        ...getAuthHeaders(),\n      },\n    });\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({ error: 'Unknown error' }));\n      throw new Error(errorData.error || `Failed to clear database: ${response.status} ${response.statusText}`);\n    }\n    return response.json();\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}